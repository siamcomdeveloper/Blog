<?php

/**
 * Code completion code.
 * Generated by ccg Artisan command.
 */

/**
 * Short-cut for constructor method chaining.
 *
 * @param  mixed  $object
 * @return object
 */
function with($object)
{
	return $object;
}

class Asset_Container extends Laravel\Asset_Container{};
class Query extends Laravel\Database\Query{};

class Auth extends Laravel\Auth\Drivers\Eloquent{};
abstract class Authenticator extends Laravel\Auth\Drivers\Driver{};
class Asset extends Laravel\Asset{};
class Autoloader extends Laravel\Autoloader{};
class Blade extends Laravel\Blade{};
class Bundle extends Laravel\Bundle{};
class Cache extends Laravel\Cache\Drivers\File{};
class Config extends Laravel\Config{};
class Controller extends Laravel\Routing\Controller{};
class Cookie extends Laravel\Cookie{};
class Crypter extends Laravel\Crypter{};
class DB extends Laravel\Database{

	//From /laravel/database/connection.php
	/**
	 * Execute a callback wrapped in a database transaction.
	 *
	 * @param  callback  $callback
	 * @return void
	 */
	public function transaction($callback) {}

	/**
	 * Execute a SQL query and return an array of StdClass objects.
	 *
	 * @param  string  $sql
	 * @param  array   $bindings
	 * @return array
	 */
	public function query($sql, $bindings = array()) {}
			
};
class Eloquent extends Laravel\Database\Eloquent\Model{
	
	//Dummy variable - common use
	
	/**
	 * Timestamp of record when created. 
	 *
	 * @var string
	 */
	public $created_at;
	
	/**
	 * Timestamp of record when updated. 
	 *
	 * @var string
	 */
	public $updated_at;
	
	//Dummy method - I can't find real method.

	/**
	 * Eager load table that you want to join
	 *
	 * <code>
	 *	Book::with("author")->get();
	 *	Book::with(array("author", "author.contacts"))->get();
	 *	User::with(array("posts" => function($query)
	 *	{
	 *	    $query->where("title", "like", "%first%");
	 *	}))->get();
	 * </code>
	 *
	 * @param mixed $column
	 * @return Query
	 */
	public static function with($column) {}

	/**
	 * Return total records that you want query
	 *
	 * @return int
	 */
	public static function count() {}
	
	//From /laravel/database/query.php
	
	/**
	 * Add a where condition to the query.
	 *
	 * @param  string  $column
	 * @param  string  $operator
	 * @param  mixed   $value
	 * @param  string  $connector
	 * @return Query
	 */
	public function where($column, $operator = null, $value = null, $connector = 'AND') {}
	
	/**
	 * Add a where in condition to the query.
	 *
	 * @param  string  $column
	 * @param  array   $values
	 * @param  string  $connector
	 * @param  bool    $not
	 * @return Query
	 */
	public function where_in($column, $values, $connector = 'AND', $not = false) {}
	
	/**
	 * Add an ordering to the query.
	 *
	 * @param  string  $column
	 * @param  string  $direction
	 * @return Query
	 */
	public function order_by($column, $direction = 'asc') {}
	
	/**
	 * Set the query limit.
	 *
	 * @param  int  $value
	 * @return Query
	 */
	public function take($value) {}
	
	/**
	 * Find a record by the primary key.
	 *
	 * @param  int     $id
	 * @param  array   $columns
	 * @return Query
	 */
	public function find($id, $columns = array('*')) {}

	/**
	 * Add an array of columns to the SELECT clause.
	 *
	 * @param  array  $columns
	 * @return Query
	 */
	public function select($columns = array('*')) {}
	
	/**
	 * Get an array with the values of a given column.
	 *
	 * @param  string  $column
	 * @param  string  $key
	 * @return array
	 */
	public function lists($column, $key = null) {}
	
	/**
	 * Add a join clause to the query.
	 *
	 * @param  string  $table
	 * @param  string  $column1
	 * @param  string  $operator
	 * @param  string  $column2
	 * @param  string  $type
	 * @return Query
	 */
	public function join($table, $column1, $operator = null, $column2 = null, $type = 'INNER') {}
	
			
};
class Event extends Laravel\Event{};
class File extends Laravel\File{};
class Filter extends Laravel\Routing\Filter{};
class Form extends Bootstrapper\Form{};
class Hash extends Laravel\Hash{};
class HTML extends Laravel\HTML{};
class Input extends Laravel\Input{};
class IoC extends Laravel\IoC{};
class Lang extends Laravel\Lang{};
class Log extends Laravel\Log{

	//Common used.

	/**
	 * Write an "error" message to the log file
	 *
	 * @param string $message
	 * @return void
	 */
	public static function error($message) {}

	/**
	 * Write an "warning" message to the log file
	 *
	 * @param string $message
	 * @return void
	 */
	public static function warning($message) {}

	/**
	 * Write an "info" message to the log file
	 *
	 * @param string $message
	 * @return void
	 */
	public static function info($message) {}
			
};
class Memcached extends Laravel\Memcached{};
class Paginator extends Bootstrapper\Paginator{};
class Profiler extends Laravel\Profiling\Profiler{};
class URL extends Laravel\URL{};
class Redirect extends Laravel\Redirect{};
class Redis extends Laravel\Redis{};
class Request extends Laravel\Request{};
class Response extends Laravel\Response{};
class Route extends Laravel\Routing\Route{};
class Router extends Laravel\Routing\Router{};
class Schema extends Laravel\Database\Schema{};
class Section extends Laravel\Section{};
class Session extends Laravel\Session{
	//Methods from /laravel/session/payload.php - Class Payload

	/**
	 * Load the session for the current request.
	 *
	 * @param  string  $id
	 * @return void
	 */
	public function load($id) {}

	/**
	 * Determine if the session or flash data contains an item.
	 *
	 * @param  string  $key
	 * @return bool
	 */
	public function has($key) {}

	/**
	 * Get an item from the session.
	 *
	 * The session flash data will also be checked for the requested item.
	 *
	 * <code>
	 *		// Get an item from the session
	 *		$name = Session::get('name');
	 *
	 *		// Return a default value if the item doesn't exist
	 *		$name = Session::get('name', 'Taylor');
	 * </code>
	 *
	 * @param  string  $key
	 * @param  mixed   $default
	 * @return mixed
	 */
	public function get($key, $default = null) {}

	/**
	 * Write an item to the session.
	 *
	 * <code>
	 *		// Write an item to the session payload
	 *		Session::put('name', 'Taylor');
	 * </code>
	 *
	 * @param  string  $key
	 * @param  mixed   $value
	 * @return void
	 */
	public function put($key, $value) {}

	/**
	 * Write an item to the session flash data.
	 *
	 * Flash data only exists for the current and next request to the application.
	 *
	 * <code>
	 *		// Write an item to the session payload's flash data
	 *		Session::flash('name', 'Taylor');
	 * </code>
	 *
	 * @param  string  $key
	 * @param  mixed   $value
	 * @return void
	 */
	public function flash($key, $value) {}

	/**
	 * Keep all of the session flash data from expiring after the request.
	 *
	 * @return void
	 */
	public function reflash() {}

	/**
	 * Keep a session flash item from expiring at the end of the request.
	 *
	 * <code>
	 *		// Keep the "name" item from expiring from the flash data
	 *		Session::keep('name');
	 *
	 *		// Keep the "name" and "email" items from expiring from the flash data
	 *		Session::keep(array('name', 'email'));
	 * </code>
	 *
	 * @param  string|array  $keys
	 * @return void
	 */
	public function keep($keys) {}

	/**
	 * Remove an item from the session data.
	 *
	 * @param  string  $key
	 * @return void
	 */
	public function forget($key) {}

	/**
	 * Remove all of the items from the session.
	 *
	 * The CSRF token will not be removed from the session.
	 *
	 * @return void
	 */
	public function flush() {}

	/**
	 * Assign a new, random ID to the session.
	 *
	 * @return void
	 */
	public function regenerate() {}

	/**
	 * Get the CSRF token that is stored in the session data.
	 *
	 * @return string
	 */
	public function token() {}

	/**
	 * Get the last activity for the session.
	 *
	 * @return int
	 */
	public function activity() {}

	/**
	 * Store the session payload in storage.
	 *
	 * This method will be called automatically at the end of the request.
	 *
	 * @return void
	 */
	public function save() {}

	/**
	 * Clean up expired sessions.
	 *
	 * If the session driver is a sweeper, it must clean up expired sessions
	 * from time to time. This method triggers garbage collection.
	 * 
	 * @return void
	 */
	public function sweep() {}
};
class Str extends Laravel\Str{};
class Task extends Laravel\CLI\Tasks\Task{};
class URI extends Laravel\URI{};
class Validator extends Laravel\Validator{};
class View extends Laravel\View{};
class Alert extends Bootstrapper\Alert{};
class Badges extends Bootstrapper\Badges{};
class Breadcrumbs extends Bootstrapper\Breadcrumbs{};
class Buttons extends Bootstrapper\Buttons{};
class ButtonGroup extends Bootstrapper\ButtonGroup{};
class ButtonToolbar extends Bootstrapper\ButtonToolbar{};
class Carousel extends Bootstrapper\Carousel{};
class DropdownButton extends Bootstrapper\DropdownButton{};
class Helpers extends Bootstrapper\Helpers{};
class Icons extends Bootstrapper\Icons{};
class Labels extends Bootstrapper\Labels{};
class Navbar extends Bootstrapper\Navbar{

	/**
	 * Create a new Navbar instance with dark color.
	 *
	 * @param array $attributes An array of attributes for the current navbar
	 * @param const $type       The type of Navbar to create
	 *
	 * @return Navbar
	 */
	function inverse($attributes = array(), $type = Navbar::STATIC_BAR) {}
			
};
class Navigation extends Bootstrapper\Navigation{};
class Progress extends Bootstrapper\Progress{};
class SplitDropdownButton extends Bootstrapper\SplitDropdownButton{};
class Tabbable extends Bootstrapper\Tabbable{};
class Tables extends Bootstrapper\Tables{};
class Typeahead extends Bootstrapper\Typeahead{};
class Former extends Former\Former{};
// End of code generation